# -*- coding: utf-8 -*-
"""
Plots using Bokeh the output/*.txt files generated by interbank.py / run_mc.py / run_ppo.py

@author: hector@bith.net
@date:   06/2023
"""

import matplotlib.pyplot as plt
import interbank
import typer
import os


class Plot:
    data = []
    tmin = 0
    tmax = 0

    def load_data(self, datafiles, tmin):
        if tmin:
            self.tmin = tmin
        tmax = 0
        for datafile in datafiles.split(","):
          self.data.append([])
          lines = 0
          ignored = 0        
          with open(interbank.Statistics.get_export_path(datafile), 'r', encoding="utf-8") as loadfile:
            for line in loadfile.readlines():
                if not line.strip().startswith("#"):
                    elements = line.split("\t")
                    t = int(elements[0]
                    if t>=tmin:
                        self.data[-1].append(elements)
                        lines += 1
                    else:
                        ignored += 1
                    if t>tmax:
                        tmax=t
                else:
                    ignored += 1
          print f"{ignored} lines in {datafile}, {lines} incorporated"
          self.tmax = tmax
        return lines

    def plot(self, column, save, file_format, t_min, y2):
        destination = interbank.Statistics.get_export_path(save).replace(".txt", "." + file_format)
        if len(self.data) == 0:
            print("no data loaded to create a plot")
            return False
        if column not in iter(interbank.DataColumns) or 
           ( y2 not is None and y2 not in iter(interbank.DataColumns):
            print("column not valid. use --what all to view valid column numbers")
            return False
        else:
            description = interbank.DataColumns.get_name(column)
            if y2 not is None:
                description_y2 = interbank.DataColumns.get_name(y2)                
            data_max = 0.0
            data_min = 1e8
            data_total = 0
            i = 0
            x = []
            y = []
            y2= []
            for data in self.data:
              y.append([])
              y2.append([])
              for values in data:
                value = float(values[column])
                y[-1].append(value)
                if data_max<value:
                    data_max=value
                if data_min>value:
                    data_min=value
                if y2 not is None:
                    value2 = float(values[y2])
                    y2[-1].append(value2)                    
                data_total += value
                if i==0:
                    t=int(values[0])
                    x.append(t)
            plt.clf()
            plt.xlabel("t")
            plt.title(description)
            if y2 not is None:
                data1_max = 0.0
                data1_min = 1e8
                data1_total = 0
                yy1 = []
                for line in self.data1:
                    value = float(line[column + 1])
                    if data1_max < value:
                        data1_max = value
                    if data1_min > value:
                        data1_min = value
                    data1_total += value
                    t = int(line[0])
                    if t > t_min:
                        yy1.append(value)
                #plt.plot(xx, yy, 'k-', xx, yy1, 'k:')
                plt.figure(figsize=(12, 8))
                plt.plot(xx, yy, 'g-', xx, yy1, 'b--')
                #plt.figure().set_figwidth(15)
                plt.legend((self.description,self.description1))
                print(f"{self.description1} -> max: {data1_max} min: {data1_min} avg: {data1_total / i} sum: {data1_total}")
            else:
                plt.ylabel(description)
                plt.plot(xx, yy, '-', color="blue")
            print(f"{self.description} -> max: {data_max} min: {data_min} avg: {data_total/i} num: {data_total}")
            plt.savefig(destination)
            print("plot saved in ", destination)
            return True

    def what(self):
        print("this is what you can plot from interbank output files (use --help):")
        for column in interbank.DataColumns:
            print(f"\t{column.value}: {column.name}")


def run_interactive(column: int = typer.Option(None, help=f"Plot column number X"),
                    save: str = typer.Option(None, help=f"Saves the plot"),
                    extension: str = typer.Option("svg", help=f"Saves as svg/pdf/jpg/png"),
                    tmin: int = typer.Option(0, help=f"Min value for time"),
                    load: str = typer.Option(None, help=f"Loads the file(s) with the data (sep by comma)"),
                    y2: int = typer.Option(None, help=f"Loads this other column from files to plot in y2")):
    """
        Run the Plot class
    """
    plot = Plot()    
    if column is None:
        plot.what()
    else:
        if load and save:
            print(plot.load_data(load,tmin), "lines loaded from ", load)
            plot.plot(column, save, extension, y2)
        else:
            print("bad usage: check --help")


app = typer.Typer()
if __name__ == "__main__":
    typer.run(run_interactive)

