# -*- coding: utf-8 -*-
"""
Plots using Bokeh the output/*.txt files generated by interbank.py / run_mc.py / run_ppo.py

@author: hector@bith.net
@date:   06/2023
"""

import matplotlib.pyplot as plt
import interbank
import typer
import os


class Plot:
    data = []
    data1 = []
    stats = interbank.Statistics(interbank.Model())
    attributes = {}
    description = ""
    description1 = ""

    def __init__(self):
        for attribute in dir(self.stats):
            if isinstance(getattr(self.stats, attribute), int):
                value = getattr(self.stats, attribute)
                attribute = attribute.replace("DATA_", "")
                self.attributes[value] = attribute

    def load_data(self, datafile, extra=False):
        i = 0
        if extra:
            self.description1 = datafile
        else:
            self.description = datafile
        with open(interbank.Statistics.get_export_path(datafile), 'r', encoding="utf-8") as loadfile:
            for line in loadfile.readlines():
                if not line.strip().startswith("#"):
                    if extra:
                        self.data1.append(line.split("\t"))
                    else:
                        self.data.append(line.split("\t"))
                    i += 1
                else:
                    print(f"avoided comment line in {datafile}")
        return i

    def plot(self, column, save, file_format, t_min, extra=False):
        destination = self.stats.get_export_path(save).replace(".txt", "." + file_format)
        if len(self.data) == 0:
            print("no data loaded to create a plot")
            return False
        if column >= len(self.attributes):
            print("column not valid. use --what all to view valid column numbers")
            return False
        else:
            description = self.attributes[column].lower()
            data_max = 0.0
            data_min = 1e8
            data_total = 0
            i = 0
            xx = []
            yy = []
            for line in self.data:
                value = float(line[column+1])
                i += 1
                if data_max<value:
                    data_max=value
                if data_min>value:
                    data_min=value
                data_total += value
                t=int(line[0])
                if t>t_min:
                    xx.append(t)
                    yy.append(value)
            plt.clf()
            plt.xlabel("t")
            plt.title(description)
            if extra:
                data1_max = 0.0
                data1_min = 1e8
                data1_total = 0
                yy1 = []
                for line in self.data1:
                    value = float(line[column + 1])
                    if data1_max < value:
                        data1_max = value
                    if data1_min > value:
                        data1_min = value
                    data1_total += value
                    t = int(line[0])
                    if t > t_min:
                        yy1.append(value)
                #plt.plot(xx, yy, 'k-', xx, yy1, 'k:')
                plt.figure(figsize=(12, 8))
                plt.plot(xx, yy, 'g-', xx, yy1, 'b--')
                #plt.figure().set_figwidth(15)
                plt.legend((self.description,self.description1))
                print(f"{self.description1} -> max: {data1_max} min: {data1_min} avg: {data1_total / i} sum: {data1_total}")
            else:
                plt.ylabel(description)
                plt.plot(xx, yy, '-', color="blue")
            print(f"{self.description} -> max: {data_max} min: {data_min} avg: {data_total/i} num: {data_total}")
            plt.savefig(destination)
            print("plot saved in ", destination)
            return True

    def what(self):
        list_attrs = list(self.attributes.keys())
        list_attrs.sort()
        for i in list_attrs:
            print(f"{i:3} {self.attributes[i]}")


@app.command()
def what():

def run_interactive(column: int = typer.Option(None, help=f"Plot column number X"),
                    save: str = typer.Option(None, help=f"Saves the graph"),
                    extension: str = typer.Option("svg", help=f"Saves as svg/pdf/jpg/png"),
                    tmin: int = typer.Option(0, help=f"Min value for time"),
                    load: str = typer.Option(None, help=f"Loads the file with the data"),
                    load1: str = typer.Option(None, help=f"Loads extra file for a second y values")):
    """
        Run the Plot class
    """
    plot = Plot()

    if load and column is not None and save:
        print(plot.load_data(load), "lines loaded from", load)
        if load1:
            print(plot.load_data(load1, extra=True), "lines loaded from", load1)
        plot.plot(column, save, extension, tmin, extra=(not load1 is None))
    else:
        if what:
            plot.what()
        else:
            print("bad usage: check --help")


app = typer.Typer()
app
if __name__ == "__main__":
    typer.run(run_interactive)

