# -*- coding: utf-8 -*-
"""
Plots using Bokeh the output/*.txt files generated by interbank.py / run_mc.py / run_ppo.py

@author: hector@bith.net
@date:   06/2023
"""

import bokeh.plotting
import bokeh.io
import interbank
import typer
import os


class Plot:
    data = []
    stats = interbank.Statistics( interbank.Model() )
    attributes = {}

    def __init__(self):
        for attribute in dir(self.stats):
            if isinstance(getattr(self.stats, attribute), int):
                value = getattr(self.stats, attribute)
                attribute = attribute.replace("DATA_", "")
                self.attributes[value] = attribute

    def load_data(self, datafile):
        i = 0
        with open(interbank.Statistics.get_export_path(datafile), 'r', encoding="utf-8") as loadfile:
            for line in loadfile.readlines():
                if not line.strip().startswith("#"):
                    items = line.split("\t")
                    self.data.append(line.split("\t"))
                    i += 1
                else:
                    print("avoided comment line")
        return i

    def plot(self, column, save, svg=False):
        destination = self.stats.get_export_path(save).replace(".txt", ".svg" if svg else ".html")
        if os.path.exists(destination):
            print(f"file {destination} exists: remove manually")
            return False
        if len(self.data) == 0:
            print("no data loaded to create a plot")
            return False
        if column >= len(self.attributes):
            print("column not valid. use --what all to view valid column numbers")
            return False
        else:
            description = self.attributes[column].lower()
            xx = []
            yy = []
            for line in self.data:
                xx.append(int(line[0]))
                yy.append(float(line[column+1]))
            p = bokeh.plotting.figure(title=description, x_axis_label='Time', y_axis_label=description,
                                      sizing_mode="stretch_width",
                                      height=550)
            p.line(xx, yy, color="blue", line_width=2)
            if svg:
                from bokeh.io import export_svgs
                p.output_backend = "svg"
                export_svgs(p, filename=destination)
            else:
                bokeh.plotting.output_file(destination, description)
                bokeh.plotting.save(p)
            print("plot saved in ", destination)
            return True

    def what(self):
        list_attrs = list(self.attributes.keys())
        list_attrs.sort()
        for i in list_attrs:
            print(f"{i:3} {self.attributes[i]}")


def run_interactive(what: str = typer.Option(str, help=f"What to plot (all)"),
                    column: int = typer.Option(None, help=f"Plot column number X"),
                    save: str = typer.Option(None, help=f"Saves the graph"),
                    format: str = typer.Option("html", help=f"Saves as svg/html"),
                    load: str = typer.Option(None, help=f"Loads the file with the data")):
    """
        Run the Plot class
    """
    plot = Plot()

    if load and column and save:
        print(plot.load_data(load), "lines loaded from", load)
        plot.plot(column, save, format == 'svg')
    else:
        if what:
            plot.what()
        else:
            print("bad usage: check --help")


if __name__ == "__main__":
    typer.run(run_interactive)
