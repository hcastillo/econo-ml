---
title: "An Interbank system: relationships"
author: "Hector Castillo <hector@bith.net>"
format: 
  pdf:
    toc: true
    colorlinks: true
  html:
    toc: true
    toc-location: right
    toc-title: Contents
editor: visual
execute: 
    echo: false
    warning: false
    freeze: auto 
---

We were using initially in `interbank.py` random links between banking system. 
In this study we face the problem to determine for the central bank the best way to priorize one links or anothers with the upper objective to spread and increase the liquidity of the system.

By design $\hat{d}=1$, which means we limit to one outgoing link for each bank (not limiting the incoming links). Thus borrowers can only get loans from $\hat{d}$, lenders.


# Setting up links

## Starting links

Each banks choose randomly a lender. Only restriction is that lender should not be itself.
@fig-boltzman represents a picture of the relationships between banks in a precise instant. 

![Random initial graph of banks' links](boltzman_0.png){#fig-boltzman width="100%"}

In the next instant $t=1$ the link is changed or not depending on the fitness $\mu$ of the current lender and a possible new one (selected again randomly) as @eq-boltzman indicates:

$$
P^j_t=\frac{1}{1+e^{-\beta}(\mu^k_t-\mu^i_t)}
$$ {#eq-boltzman}


## `ShockedMarket`

It is a method though to represent a shocked market in which there are few links between banks: no one trust in another, so the majority of them are isolated and no outgoing link. It is created using a Erdős–Rényi like the example in @fig-erdos.

![Example of an Erdős–Rényi directed graph with $p=0.01$. Only five connections between nine banks isolated in three islands .](example_erdos.png){#fig-erdos width="100%"}

Changes made in the algorithm:

-   If initially the bank has no lender, it will never have one: the $t=0$ situation of lenders are sustained till the end $t=T$.
-   Without a lender the balance in this case is harder: deposit shocks conduct faster to bankruptcy.
-   If the bank goes bankruptcy, it is created again with the same lender (if it has one).
-   Greater the $p$ parameter of the Erdős–Rényi graph generator, more links we will have.


# Model behaviour with few relationships (after a shock)

With $p=0.0001$ we unlikely will obtain any relationship in a Erdős–Rényi. We will start with $p=0.001$, which has in one of the ten executions we will run, this @fig-p0001 Erdős–Rényi relationships between banks:

![$p=0.001$](p0001.png){#fig-p0001 width="100%"}

When we increase $p$, the links also grow, like @fig-p001:

![$p=0.01$](p00100_3_erdos_renyi.png){#fig-p001 width="100%"}

And when we arrive to $p=0.1$ the number of connections are enough to be all the combinations Notice that in this case, for each instance ONLY one one the possible links is choosen from the different options for each bank by random (it means that no bank has more than one output connection at the same instant). So the the Erdős–Rényi graph of  @fig-p01 is transformed in @fig-p01b.

![$p=0.01$ Erdős–Rényi graph ](p01000_0_erdos_renyi.png){#fig-p01 width="100%"}
![$p=0.01$ Erdős–Rényi adapted with only one outgoing link for each node from the previous graph](p01000_0_0.png){#fig-p01b width="100%"}

Moving from $p=0.001$ to $p=0.1$ with a total of 100 steps ($+0.001$ in each), we obtain this evolution of the liquidity, plotting the average of 10 different simulations for each step in @fig-liquidity.

![Liquidity of the simulation](liquidity.png){#fig-liquidity width="100%"}



![Bankruptcies](bankruptcies.png){#fig-bankruptcies width="100%"}

The problem with the current algorithm is when we face to a failure, we recreate a bank with the same initial strenght, as in @fig-evolution notices the absence of lenders with $p=0.005$ in this case and in the other hand, many failures.


![Evolution of one instance of the model with $p=0.005$ in $t=10$ ](evolution.png){#fig-evolution width="100%"}
